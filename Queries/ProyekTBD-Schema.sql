-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Customer"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Address_Id" integer,
    "First_Name" character varying(45),
    "Last_Name" character varying(45),
    "Email" character varying(50),
    "Create_Date" date,
    "Username" character varying(50),
    "Password" character varying(50),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Publisher"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Name" character varying(45),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Author"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Name" character varying(45),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Order"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Inventory_Id" integer,
    "Customer_Id" integer,
    "Date" date,
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Book"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Genre_Id" integer,
    "Language_Id" integer,
    "Publisher_Id" integer,
    "Title" character varying(100),
    "Isbn" character varying(15),
    "Num_Pages" integer,
    "Publication_Date" date,
    "Price" integer,
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Genre"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Name" character varying(25),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Language"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Name" character varying(20),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Review"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Book_Id" integer,
    "Customer_Id" integer,
    "Rating" integer,
    "Review_Details" character varying(100),
    "Date" date,
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Book_Author"
(
    "Book_Id" integer,
    "Author_Id" integer,
    PRIMARY KEY ("Book_Id", "Author_Id")
);

CREATE TABLE IF NOT EXISTS public."Inventory"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Book_Id" integer,
    "Store_Id" integer,
    "Stock" integer,
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Store"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Name" character varying(50),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Staff"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Address_Id" integer,
    "Store_Id" integer,
    "First_Name" character varying(45),
    "Last_Name" character varying(45),
    "Email" character varying(50),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Address"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "City_Id" integer,
    "Address" character varying(50),
    "Postal_Code" character varying(10),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."City"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Country_Id" integer,
    "City" character varying(50),
    PRIMARY KEY ("Id")
);

CREATE TABLE IF NOT EXISTS public."Country"
(
    "Id" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 ),
    "Country" character varying(50),
    PRIMARY KEY ("Id")
);

ALTER TABLE IF EXISTS public."Customer"
    ADD CONSTRAINT "Customer_Address_Id_fk" FOREIGN KEY ("Address_Id")
    REFERENCES public."Address" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Order"
    ADD CONSTRAINT "Order_Inventory_Id_fk" FOREIGN KEY ("Inventory_Id")
    REFERENCES public."Inventory" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Order"
    ADD CONSTRAINT "Order_Customer_Id_fk" FOREIGN KEY ("Customer_Id")
    REFERENCES public."Customer" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Book"
    ADD CONSTRAINT "Book_Genre_Id_fk" FOREIGN KEY ("Genre_Id")
    REFERENCES public."Genre" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Book"
    ADD CONSTRAINT "Book_Language_Id_fk" FOREIGN KEY ("Language_Id")
    REFERENCES public."Language" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Book"
    ADD CONSTRAINT "Book_Publisher_Id_fk" FOREIGN KEY ("Publisher_Id")
    REFERENCES public."Publisher" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Review"
    ADD CONSTRAINT "Review_Book_Id_fk" FOREIGN KEY ("Book_Id")
    REFERENCES public."Book" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Review"
    ADD CONSTRAINT "Review_Customer_Id_fk" FOREIGN KEY ("Customer_Id")
    REFERENCES public."Customer" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Book_Author"
    ADD CONSTRAINT "Book_Author_Book_Id_fk" FOREIGN KEY ("Book_Id")
    REFERENCES public."Book" ("Id") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Book_Author"
    ADD CONSTRAINT "Book_Author_Author_Id_fk" FOREIGN KEY ("Author_Id")
    REFERENCES public."Author" ("Id") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Inventory"
    ADD CONSTRAINT "Inventory_Book_Id_fk" FOREIGN KEY ("Book_Id")
    REFERENCES public."Book" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Inventory"
    ADD CONSTRAINT "Inventory_Store_Id_fk" FOREIGN KEY ("Store_Id")
    REFERENCES public."Store" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Staff"
    ADD CONSTRAINT "Staff_Store_Id_fk" FOREIGN KEY ("Store_Id")
    REFERENCES public."Store" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Staff"
    ADD CONSTRAINT "Staff_Address_Id_fk" FOREIGN KEY ("Address_Id")
    REFERENCES public."Address" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."Address"
    ADD CONSTRAINT "Address_City_Id_fk" FOREIGN KEY ("City_Id")
    REFERENCES public."City" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."City"
    ADD CONSTRAINT "City_Country_Id_fk" FOREIGN KEY ("Country_Id")
    REFERENCES public."Country" ("Id") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;

CREATE VIEW public."Book_List" AS
SELECT 
    b."Id" AS "Book_Id",
    b."Title",
    b."Isbn",
    b."Num_Pages",
    b."Publication_Date",
    b."Price",
    g."Name" AS "Genre",
    l."Name" AS "Language",
    p."Name" AS "Publisher"
FROM 
    public."Book" b
JOIN 
    public."Genre" g ON b."Genre_Id" = g."Id"
JOIN 
    public."Language" l ON b."Language_Id" = l."Id"
JOIN 
    public."Publisher" p ON b."Publisher_Id" = p."Id";


CREATE VIEW public."Customer_List" AS
SELECT 
    c."Id" AS "Customer_Id",
    c."First_Name",
    c."Last_Name",
    c."Email",
    c."Create_Date",
    a."Address",
    ci."City",
    co."Country"
FROM 
    public."Customer" c
LEFT JOIN 
    public."Address" a ON c."Address_Id" = a."Id"
LEFT JOIN 
    public."City" ci ON a."City_Id" = ci."Id"
LEFT JOIN 
    public."Country" co ON ci."Country_Id" = co."Id";


CREATE VIEW public."Staff_List" AS
SELECT 
    s."Id" AS "Staff_Id",
    s."First_Name",
    s."Last_Name",
    s."Email",
    st."Name" AS "Store",
    a."Address",
    ci."City",
    co."Country"
FROM 
    public."Staff" s
LEFT JOIN 
    public."Store" st ON s."Store_Id" = st."Id"
LEFT JOIN 
    public."Address" a ON s."Address_Id" = a."Id"
LEFT JOIN 
    public."City" ci ON a."City_Id" = ci."Id"
LEFT JOIN 
    public."Country" co ON ci."Country_Id" = co."Id";


CREATE VIEW public."Sales_by_Store" AS
SELECT 
    st."Name" AS "Store",
    COUNT(o."Id") AS "Total_Sales",
    SUM(b."Price") AS "Total_Revenue"
FROM 
    public."Order" o
JOIN 
    public."Inventory" i ON o."Inventory_Id" = i."Id"
JOIN 
    public."Book" b ON i."Book_Id" = b."Id"
JOIN 
    public."Store" st ON i."Store_Id" = st."Id"
GROUP BY 
    st."Name";


END;